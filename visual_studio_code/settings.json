// https://github.com/deoren/config-files

// Place your settings in this file to overwrite the default settings
{

    // Disable sending crash reports to be sent to Microsoft.
    // This option requires restart to take effect.
    "telemetry.enableCrashReporter": false,

    // https://code.visualstudio.com/docs/supporting/faq
    "telemetry.enableTelemetry": false,

    // plugin setting
    "vscode-mysql.enableTelemetry": false,

    // Controls the font size.
    "editor.fontSize": 16,

    // Zoom the font of the editor when using mouse wheel and holding Ctrl
    "editor.mouseWheelZoom": true,

    // Controls whether the editor should render whitespace characters
    "editor.renderWhitespace": "all",

    // Remove trailing auto inserted whitespace
    "editor.trimAutoWhitespace": true,

    // Controls whether the editor should render indent guides
    "editor.renderIndentGuides": true,

    // Controls the delay in ms after which quick suggestions will show up
    //"editor.quickSuggestionsDelay": 500,

    // Show file minimap on right gutter
    "editor.minimap.enabled": false,

    // Move editor selections with drag and drop
    "editor.dragAndDrop": true,

    // Enables a pop-up that shows parameter documentation and type information as you type.
    "editor.parameterHints.enabled": true,

    // Controls if the editor should automatically close brackets after opening them
    "editor.autoClosingBrackets": "beforeWhitespace",

    // Controls if the editor should automatically format the line after typing
    "editor.formatOnType": true,

    // Controls if suggestions should be accepted 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
    "editor.acceptSuggestionOnEnter": "off",

    // Specifies the indentation width for code blocks. This is a VS Code setting but it is respected by the code formatter.
    "editor.tabSize": 4,

    // If true, automatically formats when they are saved. This is a VS Code setting and may also affect non-PowerShell files.
    "editor.formatOnSave": false,

    // Control whether IntelliSense is active when typing in comments or strings. You can still request completions with Ctrl+Space but quick suggestions, AKA "24x7 IntelliSense", are disabled by default in comments and strings. To tune the suggestions behavior to your needs, we now allow more control over the editor.quickSuggestions setting:
    "editor.quickSuggestions": {
    "comments": true, // <- no 24x7 IntelliSense in comments
    "strings": true, // but in strings and the other parts of source files
    "other": true
    },

    // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
    "editor.autoIndent": true,

    // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty
    "editor.rulers": [80],

    // Controls if the diff editor shows changes in leading or trailing whitespace as diffs
    "diffEditor.ignoreTrimWhitespace": false,

    // Controls if the diff editor shows +/- indicators for added/removed changes
    "diffEditor.renderIndicators": true,

    // Controls if the diff editor shows the diff side by side or inline
    "diffEditor.renderSideBySide": false,

    // When enabled, will trim trailing whitespace when you save a file.
    "files.trimTrailingWhitespace": true,

    // The default end of line character. Use \n for LF and \r\n for CRLF.
    "files.eol": "\n",

    // When enabled, insert a final new line at the end of the file when saving it.
    "files.insertFinalNewline": true,

    // The default language mode that is assigned to new files.
    "files.defaultLanguage": "shellscript",

    // Controls if folders should open in a new window or replace the last active window.
    // - default: folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)
    // - on: folders will open in a new window
    // - off: folders will replace the last active window
    // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
    "window.openFilesInNewWindow": "default",

    // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
    "window.zoomLevel": 0,

    // Controls how windows are being reopened after a restart. Select 'none' to always start with an empty window, 'one' to reopen the last window you worked on, 'folders' to reopen all folders you had opened or 'all' to reopen all windows of your last session.
    "window.restoreWindows": "all",

      // When enabled, will show the Welcome page on startup.
    "workbench.startupEditor": "none",

    // Set to false to keep editors open even if the file was deleted on disk. Editors will indicate if the file was deleted on disk with their label.
    "workbench.editor.closeOnFileDelete": false,

    // If enabled, prevent opening the same file in another group if the file was already opened. One common scenario is the file picker (Quick Open): by default, it will open a file in the current active Editor Group. Changing this setting will prefer to open the file in any of the other groups in case the file is already opened there.
    "workbench.editor.revealIfOpen": true,

    // Controls whether a top border is drawn on modified (dirty) editor tabs or not.
    "workbench.editor.highlightModifiedTabs": true,

    // Causes a newline to be inserted after a closing brace in multi-line expressions like if/else
    "powershell.codeFormatting.newLineAfterCloseBrace": true,

    // Causes whitespace to be inserted before an open brace like Foreach-Object {
    "powershell.codeFormatting.whitespaceBeforeOpenBrace":true,

    // Causes whitespace to be inserted before an open parentheses like if (
    "powershell.codeFormatting.whitespaceBeforeOpenParen": true,

    // Causes whitespace to be inserted around operators like = or +
    "powershell.codeFormatting.whitespaceAroundOperator": true,

    // Causes whitespace to be inserted around separator characters like ; and ,
    "powershell.codeFormatting.whitespaceAfterSeparator": true,

    // Single-line expressions, like small if/else statements, will not be expanded to multiple lines.
    "powershell.codeFormatting.ignoreOneLineBlock":false,

    // Places open brace on the same line as its associated statement. Default is true.
    "powershell.codeFormatting.openBraceOnSameLine": true,

    // Ensures that a new line occurs after an open brace (unless in a pipeline statement on the same line). Default is true
    "powershell.codeFormatting.newLineAfterOpenBrace": true,

    //  (default: true) - If true, causes PowerShell extension features to start automatically when a PowerShell file is opened. If false, the user must initiate startup using the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features will not be enabled until the extension has been started. Most users will want to leave this setting to true, though it was added to save CPU cycles if you often use new VS Code instances to quickly view PowerShell files.
    "powershell.startAutomatically": true,

    //  (default: true) - If true, causes the integrated console to be shown automatically when the PowerShell extension is initialized.
    "powershell.integratedConsole.showOnStartup": false,

    // (default: true) - If true, causes the integrated console to be focused when a script selection is run or a script file is debugged.
    "powershell.integratedConsole.focusConsoleOnExecute": true,

    // (default: true) If true, this code formatting rule automatically aligns the equal sign in assignments of keys in hash tables or DSC configurations. It also works with nested hash tables.
    // https://github.com/PowerShell/vscode-powershell/issues/672
    "powershell.codeFormatting.alignPropertyValuePairs": true,
    "files.associations": {
        "*.cf": "shellscript",
        "*.conf": "shellscript",
        "*.pcre": "perl",

        // EZproxy specific settings
        "config.txt": "shellscript",
        "user.txt": "shellscript",
        "users*.txt": "shellscript",

        // ... this one often uses shell-style comments like the EZproxy
        // config file patterns listed above, but is used by many other
        // applications also
        "*.cfg": "shellscript",

        "*.ini.tmpl": "ini"
    },

    // I want to retain control of when updates to extensions are applied
    "extensions.autoUpdate": false,
    "python.linting.enabledWithoutWorkspace": false,
    "gitlens.advanced.messages": {
        "suppressCommitHasNoPreviousCommitWarning": false,
        "suppressCommitNotFoundWarning": false,
        "suppressFileNotUnderSourceControlWarning": false,
        "suppressGitVersionWarning": false,
        "suppressLineUncommittedWarning": false,
        "suppressNoRepositoryWarning": false,
        "suppressResultsExplorerNotice": false,
        "suppressShowKeyBindingsNotice": true,
        "suppressUpdateNotice": false,
        "suppressWelcomeNotice": true
    },

    // SPHINX SETTINGS
    // https://github.com/vscode-restructuredtext/vscode-restructuredtext/blob/master/docs/sphinx.md


    // Sphinx directives.
    "restructuredtext.linter.sphinxDirectives": [
        "toctree",
        "todolist",
        "todo",
        "versionchanged",
        "versionadded",
        "seealso",
        "code-block"
    ],

    // Sphinx text roles.
    "restructuredtext.linter.sphinxTextRoles": [
        "doc",
        "ref",
        "manpage"
    ],

    // HTML page output folder relative to workspace root. This is an absolute path, and you can use ${workspaceRoot} to represent workspace root folder.
    "restructuredtext.builtDocumentationPath": "${workspaceRoot}/build",

    // The folder that contains conf.py relative to workspace root. This is an absolute path, and you can use ${workspaceRoot} to represent workspace root folder.
    "restructuredtext.confPath": "${workspaceRoot}/source",
    "gitlens.keymap": "alternate",
    "gitlens.historyExplorer.enabled": true,
    "gitlens.views.fileHistory.enabled": true,
    "gitlens.views.lineHistory.enabled": true,
    "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",

    // Configure editor settings to be overridden for [reStructuredText] markup language
    "[restructuredtext]": {
        "editor.tabSize": 3
    },

    "[markdown]": {
        "editor.tabSize": 2
      },
    "[yaml]": {
        "editor.tabSize": 2
    },

    // Controls whether Git should check for unsaved files before committing.
    "git.promptToSaveFilesBeforeCommit": true,
    "search.showLineNumbers": true,

    // Controls after how many characters text is wrapped.
    "rewrap.wrappingColumn": 78,
    "editor.renderControlCharacters": true,
    "breadcrumbs.enabled": true,

    // Set all ordered list items as '1' instead of hard-coding specific steps
    // GitHub (confirmed) and other Markdown parsers will properly convert
    // these entries into the proper order.
    "markdown.extension.orderedList.marker": "one",
    "gitlens.views.fileHistory.enabled": true,
    "gitlens.views.lineHistory.enabled": true,
    "gitlens.advanced.telemetry.enabled": false,
    "svn.autorefresh": false

}
